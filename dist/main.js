(()=>{"use strict";const e=e=>{let a=0;return{hit:function(){a+=1},isSunk:function(){return e<=a},length:e,getHits:()=>a}},a=e=>({type:e,gameboard:(e=>{const a=function(){const e=[];for(let a=0;a<=9;a++){e[a]=[];for(let o=0;o<=9;o++)e[a][o]=""}return e}(),o=[];function t(e){return!(e<0||e>9)}function r(){let a=0;for(let e of o)!0===e.isSunk&&a++;if(console.log(a),a>=10)return(e=>{const a=document.querySelector(".modal"),o=document.querySelector(".overlay");return document.querySelector(".btn").addEventListener("click",(()=>{a.classList.add("hidden"),o.classList.add("hidden"),location.reload()})),{openModal:function(){document.querySelector(".win").textContent=`${e} lost!`,a.classList.remove("hidden"),o.classList.remove("hidden")}}})(`${e}`).openModal(),console.log(`${e} lose`),!0}return{gameboard:a,placeShip:function(e,r,n,d){if(!t(e)||!t(r)||""!==a[e][r])return console.log("Index out of board");if("vertical"===d&&t(e+n.length-1))for(let t=e;t<e+n.length;t++){if(""!==a[t][r])return console.log("Invalid spot");a[t][r]={type:`${n.length}ship`,ship:n,value:"O",isSunk:!1},o.push(a[t][r])}if("horizontal"===d&&t(r+n.length-1))for(let t=r;t<r+n.length;t++){if(""!==a[e][t])return console.log("Invalid spot");a[e][t]={type:`${n.length}ship`,ship:n,value:"O",isSunk:!1},o.push(a[e][t])}return a},receiveAttack:function(e,o){if(!t(e)||!t(o)||!0===r())return console.log("Attack out of board");{let t=a[e][o];if("●"===t)return;""===t?(a[e][o]="●",console.log("Miss")):"O"===t.value&&(t.ship.hit(),t.value="X",t.ship.isSunk()&&(t.isSunk=!0,console.log("Sunk")),console.log(t.isSunk),r())}},checkEndGame:r}})(e)});let o;document.addEventListener("DOMContentLoaded",(()=>{const t=document.querySelector(".gameboard-one"),r=document.querySelector(".gameboard-two"),n=a("You"),d=a("Computer"),l=e(4),i=e(3),c=e(3),m=e(2),g=e(2),s=e(2),u=e(1),b=e(1),h=e(1),p=e(1);n.gameboard.placeShip(0,0,l,"horizontal"),n.gameboard.placeShip(9,6,i,"horizontal"),n.gameboard.placeShip(0,9,c,"vertical"),n.gameboard.placeShip(8,0,m,"horizontal"),n.gameboard.placeShip(5,4,g,"vertical"),n.gameboard.placeShip(2,6,s,"horizontal"),n.gameboard.placeShip(8,4,u,"horizontal"),n.gameboard.placeShip(2,2,b,"horizontal"),n.gameboard.placeShip(6,8,h,"horizontal"),n.gameboard.placeShip(5,0,p,"horizontal"),d.gameboard.placeShip(0,0,l,"horizontal"),d.gameboard.placeShip(9,6,i,"horizontal"),d.gameboard.placeShip(0,9,c,"vertical"),d.gameboard.placeShip(8,0,m,"horizontal"),d.gameboard.placeShip(5,4,g,"vertical"),d.gameboard.placeShip(2,6,s,"horizontal"),d.gameboard.placeShip(8,4,u,"horizontal"),d.gameboard.placeShip(2,2,b,"horizontal"),d.gameboard.placeShip(7,8,h,"horizontal"),d.gameboard.placeShip(5,0,p,"horizontal"),o=function(e,a){const o=document.createElement("div");function t(){o.textContent="";for(let a=0;a<e.gameboard.gameboard.length;a++)for(let t=0;t<e.gameboard.gameboard[a].length;t++){const r=document.createElement("div");"object"==typeof e.gameboard.gameboard[a][t]?(e.gameboard.gameboard[a][t].value="O")&&(r.innerHTML=e.gameboard.gameboard[a][t].value,r.classList.add("black")):"X"===e.gameboard.gameboard[a][t]?(r.innerHTML=e.gameboard.gameboard[a][t],r.classList.add("orange")):r.innerHTML=e.gameboard.gameboard[a][t],o.appendChild(r)}a.append(o)}return o.classList.add("container"),{render:t,attack:function a(o=0){if(o>=99)return void console.log("Maximum attempts reached. Exiting attack function.");let r=Math.floor(10*Math.random()),n=Math.floor(10*Math.random());if("●"!==e.gameboard.gameboard[r][n]&&"X"!==e.gameboard.gameboard[r][n].value&&"X"!==e.gameboard.gameboard[r][n])return e.gameboard.receiveAttack(r,n),"object"==typeof e.gameboard.gameboard[r][n]?(e.gameboard.gameboard[r][n]=e.gameboard.gameboard[r][n].value,setTimeout(a,1e3),void t()):void t();a(o+1)}}}(n,t),function(e,a){const t=document.createElement("div");t.classList.add("container");for(let a=0;a<e.gameboard.gameboard.length;a++)for(let r=0;r<e.gameboard.gameboard[a].length;r++){const n=document.createElement("div");t.appendChild(n),n.addEventListener("click",(()=>{e.gameboard.receiveAttack([a],[r]),"object"==typeof e.gameboard.gameboard[a][r]?(n.innerHTML=e.gameboard.gameboard[a][r].value,n.classList.add("orange")):(n.innerHTML=e.gameboard.gameboard[a][r],setTimeout(o.attack,1e3),o.render())}))}a.append(t)}(d,r),o.render()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,