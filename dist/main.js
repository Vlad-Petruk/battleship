(()=>{"use strict";const e=e=>{let t=0;return{hit:function(){t+=1},isSunk:function(){return e<=t},length:e,getHits:()=>t}},t=e=>({type:e,gameboard:(e=>{const t=function(){const e=[];for(let t=0;t<=9;t++){e[t]=[];for(let o=0;o<=9;o++)e[t][o]=""}return e}(),o=[];function a(e){return!(e<0||e>9)}function n(e,o){const a=[t[e+1]?.[o],t[e-1]?.[o],t[e]?.[o+1],t[e]?.[o-1],t[e+1]?.[o+1],t[e-1]?.[o-1],t[e-1]?.[o+1],t[e+1]?.[o-1]];for(let e=0;e<a.length;e++)if(a[e]&&"O"===a[e].value)return!0;return!1}function r(){let t=0;for(let e of o)!0===e.isSunk&&t++;if(console.log(t),t>=10)return(e=>{const t=document.querySelector(".modal"),o=document.querySelector(".overlay");return document.querySelector(".btn").addEventListener("click",(()=>{t.classList.add("hidden"),o.classList.add("hidden"),location.reload()})),{openModal:function(){document.querySelector(".win").textContent=`${e} lost!`,t.classList.remove("hidden"),o.classList.remove("hidden")}}})(`${e}`).openModal(),console.log(`${e} lose`),!0}return{gameboard:t,placeShip:function(e,r,d,l){if(!a(e)||!a(r)||n(e,r))return 2;if("vertical"===l&&a(e+d.length-1)&&!n(e+d.length-1,r))for(let a=e;a<e+d.length;a++){if(""!==t[a][r])return 2;t[a][r]={type:`${d.length}ship`,ship:d,value:"O",isSunk:!1},o.push(t[a][r])}else{if("horizontal"!==l||!a(r+d.length-1)||n(e,r+d.length-1))return 2;for(let a=r;a<r+d.length;a++){if(""!==t[e][a])return 2;t[e][a]={type:`${d.length}ship`,ship:d,value:"O",isSunk:!1},o.push(t[e][a])}}return t},receiveAttack:function(e,o){if(!a(e)||!a(o)||!0===r())return console.log("Attack out of board");{let a=t[e][o];if("●"===a)return;""===a?(t[e][o]="●",console.log("Miss")):"O"===a.value&&(a.ship.hit(),a.value="X",a.ship.isSunk()&&(a.isSunk=!0,console.log("Sunk")),console.log(a.isSunk),r())}},checkEndGame:r}})(e)});let o;document.addEventListener("DOMContentLoaded",(()=>{!function(){const a=document.querySelector(".gameboard-one"),n=document.querySelector(".gameboard-two"),r=t("You"),d=t("Computer"),l=[e(4),e(3),e(3),e(2),e(2),e(2),e(1),e(1),e(1),e(1)];function i(e){l.forEach((t=>{let o=!1;for(;!o;){let a=Math.random()<.5?"horizontal":"vertical",n=Math.floor(10*Math.random()),r=Math.floor(10*Math.random());2!==e.gameboard.placeShip(n,r,t,a)&&(o=!0)}}))}i(r),i(d),o=function(e,t){const o=document.createElement("div");function a(){o.textContent="";for(let t=0;t<e.gameboard.gameboard.length;t++)for(let a=0;a<e.gameboard.gameboard[t].length;a++){const n=document.createElement("div");"object"==typeof e.gameboard.gameboard[t][a]?(e.gameboard.gameboard[t][a].value="O")&&(n.innerHTML=e.gameboard.gameboard[t][a].value,n.classList.add("black")):"X"===e.gameboard.gameboard[t][a]?(n.innerHTML=e.gameboard.gameboard[t][a],n.classList.add("orange")):n.innerHTML=e.gameboard.gameboard[t][a],o.appendChild(n)}t.append(o)}return o.classList.add("container"),{render:a,attack:function t(o=0){if(o>=99)return void console.log("Maximum attempts reached. Exiting attack function.");let n=Math.floor(10*Math.random()),r=Math.floor(10*Math.random());if("●"!==e.gameboard.gameboard[n][r]&&"X"!==e.gameboard.gameboard[n][r].value&&"X"!==e.gameboard.gameboard[n][r])return e.gameboard.receiveAttack(n,r),"object"==typeof e.gameboard.gameboard[n][r]?(e.gameboard.gameboard[n][r]=e.gameboard.gameboard[n][r].value,setTimeout(t,1e3),void a()):void a();t(o+1)}}}(r,a),function(e,t){const a=document.createElement("div");a.classList.add("container");for(let t=0;t<e.gameboard.gameboard.length;t++)for(let n=0;n<e.gameboard.gameboard[t].length;n++){const r=document.createElement("div");a.appendChild(r),r.addEventListener("click",(()=>{e.gameboard.receiveAttack([t],[n]),"object"==typeof e.gameboard.gameboard[t][n]?(r.innerHTML=e.gameboard.gameboard[t][n].value,r.classList.add("orange")):(r.innerHTML=e.gameboard.gameboard[t][n],setTimeout(o.attack,1e3),o.render())}))}t.append(a)}(d,n),o.render()}()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,