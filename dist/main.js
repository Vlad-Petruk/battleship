(()=>{"use strict";const e=e=>{let o=0;return{hit:function(){o+=1},isSunk:function(){return e<=o},length:e,getHits:()=>o}},o=e(4),t=e(2),n=e(4),l=(()=>{const e=function(){const e=[];for(let o=0;o<=9;o++){e[o]=[];for(let t=0;t<=9;t++)e[o][t]=""}return e}(),o=[];function t(e){return!(e<0||e>9)}return console.log(o),{gameboard:e,placeShip:function(n,l,i,c){if(!t(n)||!t(l)||""!==e[n][l])return console.log("Index out of board");if("vertical"===c&&t(n+i.length-1))for(let t=n;t<n+i.length;t++){if(""!==e[t][l])return console.log("Invalid spot");e[t][l]={type:`${i.length}ship`,ship:i,value:"O",isSunk:!1},o.push(e[t][l])}if("horizontal"===c&&t(l+i.length-1))for(let t=l;t<l+i.length;t++){if(""!==e[n][t])return console.log("Invalid spot");e[n][t]={type:`${i.length}ship`,ship:i,value:"O",isSunk:!1},o.push(e[n][t])}return e},receiveAttack:function(o,n){if(!t(o)||!t(n))return console.log("Attack out of board");{let t=e[o][n];if("·"===t)return;""===t?(e[o][n]="·",console.log("Miss")):"O"===t.value&&(t.ship.hit(),t.value="X",t.ship.isSunk()&&(t.isSunk=!0,function(o,t){const n=[e[o+1]?.[t],e[o-1]?.[t],e[o]?.[t+1],e[o]?.[t-1],e[o+1]?.[t+1],e[o-1]?.[t-1],e[o-1]?.[t+1],e[o+1]?.[t-1]];for(let l=0;l<n.length;l++)if(void 0!==n[l]&&"O"!==n[l].value&&"X"!==n[l].value)switch(n[l]="·",l){case 0:e[o+1][t]="·";break;case 1:e[o-1][t]="·";break;case 2:e[o][t+1]="·";break;case 3:e[o][t-1]="·";break;case 4:e[o+1][t+1]="·";break;case 5:e[o-1][t-1]="·";break;case 6:e[o-1][t+1]="·";break;case 7:e[o+1][t-1]="·"}}(o,n),console.log("Sunk")),console.log(t.isSunk))}},checkEndGame:function(){let e=0;for(let t of o)!0===t.isSunk&&e++;console.log(e),e>=10&&console.log("End game")}}})();l.placeShip(0,0,o,"vertical"),l.placeShip(2,2,t,"horizontal"),l.placeShip(9,6,n,"horizontal"),l.receiveAttack(2,2),l.receiveAttack(2,3),l.receiveAttack(9,7),console.log(l.gameboard)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,