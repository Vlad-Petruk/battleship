(()=>{"use strict";const e=e=>{let a=0;return{hit:function(){a+=1},isSunk:function(){return e<=a},length:e,getHits:()=>a}},a=e=>{const a=function(){const e=[];for(let a=0;a<=9;a++){e[a]=[];for(let o=0;o<=9;o++)e[a][o]=""}return e}(),o=[];function t(e){return!(e<0||e>9)}function n(e,o){const t=[a[e+1]?.[o],a[e-1]?.[o],a[e]?.[o+1],a[e]?.[o-1],a[e+1]?.[o+1],a[e-1]?.[o-1],a[e-1]?.[o+1],a[e+1]?.[o-1]];for(let e=0;e<t.length;e++)if(t[e]&&"O"===t[e].value)return!0;return!1}function r(){let a=0;for(let e=o.length-1;e>=0;e--)!0===o[e].ship.isSunk()&&a++;if(console.log(a),a>=20)return(e=>{const a=document.querySelector(".modal"),o=document.querySelector(".overlay");return document.querySelector(".btn").addEventListener("click",(()=>{a.classList.add("hidden"),o.classList.add("hidden"),location.reload()})),{openModal:function(){document.querySelector(".win").textContent=`${e} lost!`,a.classList.remove("hidden"),o.classList.remove("hidden")}}})(`${e}`).openModal(),console.log(`${e} lose`),!0}return{gameboard:a,placeShip:function(r,d,i,c){if(!t(r)||!t(d)||n(r,d))return 2;if("vertical"===c&&t(r+i.length-1)&&!n(r+i.length-1,d))for(let t=r;t<r+i.length;t++){if(""!==a[t][d])return 2;a[t][d]={type:`${e}${i.length}ship`,ship:i,value:"O",isSunk:!1},o.push(a[t][d])}else{if("horizontal"!==c||!t(d+i.length-1)||n(r,d+i.length-1))return 2;for(let t=d;t<d+i.length;t++){if(""!==a[r][t])return 2;a[r][t]={type:`${e}${i.length}ship`,ship:i,value:"O",isSunk:!1},o.push(a[r][t])}}return a},receiveAttack:function(e,o){if(!t(e)||!t(o))return console.log("Attack out of board");{let t=a[e][o];""===t?a[e][o]="●":"O"===t.value&&(t.ship.hit(),t.value="X",t.ship.isSunk()&&(t.isSunk=!0,function(e,o){const t=[a[e+1]?.[o],a[e-1]?.[o],a[e]?.[o+1],a[e]?.[o-1],a[e+1]?.[o+1],a[e-1]?.[o-1],a[e-1]?.[o+1],a[e+1]?.[o-1]];for(let n=0;n<t.length;n++)if(void 0!==t[n]&&"O"!==t[n].value)switch(t[n]="●",n){case 0:if("X"!==a[e+1][o]&&void 0!==a[e+1][o]){a[e+1][o]="●";break}case 1:if("X"!==a[e-1][o]&&void 0!==a[e-1][o]){a[e-1][o]="●";break}case 2:if("X"!==a[e][o+1]&&void 0!==a[e][o+1]){a[e][o+1]="●";break}case 3:if("X"!==a[e][o-1]&&void 0!==a[e][o-1]){a[e][o-1]="●";break}case 4:if("X"!==a[e+1][o+1]&&void 0!==a[e+1][o+1]){a[e+1][o+1]="●";break}case 5:if("X"!==a[e-1][o-1]&&void 0!==a[e-1][o-1]){a[e-1][o-1]="●";break}case 6:if("X"!==a[e-1][o+1]&&void 0!==a[e-1][o+1]){a[e-1][o+1]="●";break}case 7:if("X"!==a[e+1][o-1]&&void 0!==a[e+1][o-1]){a[e+1][o-1]="●";break}}else console.log("asfasf")}(e,o),console.log("Sunk")),console.log(t.isSunk),r())}},checkEndGame:r}},o=e=>({type:e,gameboard:a(e)});let t;document.addEventListener("DOMContentLoaded",(()=>{!function(){const a=document.querySelector(".gameboard-one"),n=document.querySelector(".gameboard-two"),r=o("You"),d=o("Computer"),i=e(4),c=e(3),l=e(3),s=e(2),m=e(2),g=e(2),u=e(1),b=e(1),f=e(1),h=e(1),v=[e(4),e(3),e(3),e(2),e(2),e(2),e(1),e(1),e(1),e(1)];function p(e,a){a.forEach((a=>{let o=!1;for(;!o;){let t=Math.random()<.5?"horizontal":"vertical",n=Math.floor(10*Math.random()),r=Math.floor(10*Math.random());2!==e.gameboard.placeShip(n,r,a,t)&&(o=!0)}}))}p(r,[i,c,l,s,m,g,u,b,f,h]),p(d,v),t=function(e,a){const o=document.createElement("div");function t(){o.textContent="";for(let a=0;a<e.gameboard.gameboard.length;a++)for(let t=0;t<e.gameboard.gameboard[a].length;t++){const n=document.createElement("div");"object"==typeof e.gameboard.gameboard[a][t]?"O"===e.gameboard.gameboard[a][t].value&&(n.innerHTML=e.gameboard.gameboard[a][t].value,n.classList.add("black")):"X"===e.gameboard.gameboard[a][t]?(n.innerHTML=e.gameboard.gameboard[a][t],n.classList.add("orange")):n.innerHTML=e.gameboard.gameboard[a][t],o.appendChild(n)}a.append(o)}return o.classList.add("container"),{render:t,attack:function a(o=0){if(o>=99)return void console.log("Maximum attempts reached. Exiting attack function.");let n=Math.floor(10*Math.random()),r=Math.floor(10*Math.random());if("●"!==e.gameboard.gameboard[n][r]&&"X"!==e.gameboard.gameboard[n][r].value&&"X"!==e.gameboard.gameboard[n][r])return e.gameboard.receiveAttack(n,r),"object"==typeof e.gameboard.gameboard[n][r]?(e.gameboard.gameboard[n][r]=e.gameboard.gameboard[n][r].value,setTimeout(a,1e3),void t()):void t();a(o+1)}}}(r,a),function(e,a){const o=document.createElement("div");o.classList.add("container"),function n(){o.textContent="";for(let a=0;a<e.gameboard.gameboard.length;a++)for(let r=0;r<e.gameboard.gameboard[a].length;r++){const d=document.createElement("div");"object"==typeof e.gameboard.gameboard[a][r]?"O"===e.gameboard.gameboard[a][r].value?(d.innerHTML=e.gameboard.gameboard[a][r].value,d.classList.add("black")):"X"===e.gameboard.gameboard[a][r].value&&(e.gameboard.gameboard[a][r]="X",d.innerHTML="X",d.classList.add("orange")):"X"===e.gameboard.gameboard[a][r]?(d.innerHTML=e.gameboard.gameboard[a][r],d.classList.add("orange")):d.innerHTML=e.gameboard.gameboard[a][r],d.addEventListener("click",(()=>{"●"!==d.textContent&&"X"!==d.textContent&&(e.gameboard.receiveAttack(a,r),"object"==typeof e.gameboard.gameboard[a][r]?n():(n(),setTimeout(t.attack,1e3),t.render()))})),o.appendChild(d)}a.append(o)}()}(d,n),t.render()}()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,